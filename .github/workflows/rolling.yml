name: Build Rolling

on:
  push:
    branches:
      - 'master'

  workflow_dispatch:

permissions: write-all

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.tag.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set Tag
        id: tag
        run: |
          echo "version=rolling" >> "$GITHUB_OUTPUT"
      - name: Update Tag
        uses: richardsimko/update-tag@v1
        with:
          tag_name: ${{ steps.tag.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          name: Pragtical ${{ steps.tag.outputs.version }}
          draft: false
          prerelease: true
          generate_release_notes: true
          body: >
            Builds that include most recent changes as they happen with optimized
            debugging symbols enabled. For non rolling builds check the whole
            list of [releases](https://github.com/pragtical/pragtical/releases).



            ### Notes



            * When installing on MacOS from the `.dmg` file (since Pragtical is
            not signed) you will need to clear the App attributes in order to
            be able to launch it. To do so open the terminal and run
            `xattr -cr /Applications/Pragtical.app`, afterwards you should be
            able to launch Pragtical normally.

  build_linux:
    name: Linux
    needs: release
    strategy:
      matrix:
        config:
          - arch: x86_64
            distro: ubuntu-22.04
          - arch: aarch64
            distro: ubuntu-22.04-arm
    runs-on: ${{ matrix.config.distro }}
    env:
      CC: gcc
      CXX: g++
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "/usr/lib/ccache" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${{ needs.release.outputs.version }}" >> "$GITHUB_ENV"
      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Update Packages
        run: sudo apt-get update
      - name: Install Dependencies
        run: |
          sudo apt-get install -y ccache
          bash scripts/install-dependencies.sh --debug
      - name: Build Portable
        run: bash scripts/build.sh --debug --forcefallback --portable
      - name: Package Portables
        run: bash scripts/package.sh --version ${INSTALL_REF} --debug --addons --binary
      - name: Build AppImages
        run: bash scripts/appimage.sh --debug --static --addons --version ${INSTALL_REF}
      - name: Upload Files
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ needs.release.outputs.version }}
          draft: false
          prerelease: true
          files: |
            pragtical-${{ env.INSTALL_REF }}-linux-${{ matrix.config.arch }}-portable.tar.gz
            Pragtical-${{ env.INSTALL_REF }}-${{ matrix.config.arch }}.AppImage

  build_macos:
    name: macOS
    needs: release
    runs-on: macos-13
    strategy:
      matrix:
        arch: [x86_64, arm64]
    env:
      CC: clang
      CXX: clang++
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: System Information
        run: |
          system_profiler SPSoftwareDataType
          bash --version
          gcc -v
          xcodebuild -version
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${{ needs.release.outputs.version }}" >> "$GITHUB_ENV"
          echo "INSTALL_NAME=pragtical-${{ needs.release.outputs.version }}-macos-${{ matrix.arch }}" >> "$GITHUB_ENV"
          if [[ $(uname -m) != ${{ matrix.arch }} ]]; then echo "ARCH=--cross-arch ${{ matrix.arch }}" >> "$GITHUB_ENV"; fi
      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install Dependencies
        run: bash scripts/install-dependencies.sh --debug
      - name: Build
        run: |
          bash scripts/build.sh --bundle --debug --forcefallback $ARCH
      - name: Create DMG Image
        run: |
          bash scripts/package.sh --version ${INSTALL_REF} $ARCH --debug --addons --dmg
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS DMG ${{ matrix.arch }}
          path: |
            ${{ env.INSTALL_NAME }}.dmg
      - name: Upload Files
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ needs.release.outputs.version }}
          draft: false
          prerelease: true
          files: |
            ${{ env.INSTALL_NAME }}.dmg

  build_macos_universal:
    name: macOS (Universal)
    needs: [release, build_macos]
    runs-on: macos-13
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: System Information
        run: |
          system_profiler SPSoftwareDataType
          bash --version
          gcc -v
          xcodebuild -version
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_BASE=pragtical-${{ needs.release.outputs.version }}-macos" >> "$GITHUB_ENV"
      - name: Download X86_64 DMG
        uses: actions/download-artifact@v4
        id: download_x86_64
        with:
          name: macOS DMG x86_64
          path: dmgs-original
      - name: Download ARM64 DMG
        uses: actions/download-artifact@v4
        id: download_arm64
        with:
          name: macOS DMG arm64
          path: dmgs-original
      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install appdmg
        run: cd ~; npm i appdmg; cd -
      - name: Prepare DMG Images
        run: |
          mkdir -p dmgs-normal
          mv -v "${{ steps.download_x86_64.outputs.download-path }}/$INSTALL_BASE-x86_64".dmg dmgs-normal
          mv -v "${{ steps.download_arm64.outputs.download-path }}/$INSTALL_BASE-arm64".dmg dmgs-normal
      - name: Create Universal DMGs
        run: |
          bash --version
          bash scripts/make-universal-binaries.sh dmgs-normal "$INSTALL_BASE-universal"
      - name: Upload Files
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ needs.release.outputs.version }}
          draft: false
          prerelease: true
          files: |
            ${{ env.INSTALL_BASE }}-universal.dmg
      - name: Cleanup Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
            name: |
              macOS DMG x86_64
              macOS DMG arm64
            failOnError: false

  build_windows_msys2:
    name: Windows
    needs: release
    runs-on: windows-2019
    strategy:
      matrix:
        config:
          - {msystem: MINGW32, arch: i686}
          - {msystem: MINGW64, arch: x86_64}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.config.msystem }}
          install: >-
            base-devel
            git
            zip
            unzip
            mingw-w64-${{ matrix.config.arch }}-gcc
            mingw-w64-${{ matrix.config.arch }}-meson
            mingw-w64-${{ matrix.config.arch }}-ninja
            mingw-w64-${{ matrix.config.arch }}-cmake
            mingw-w64-${{ matrix.config.arch }}-ca-certificates
            mingw-w64-${{ matrix.config.arch }}-ntldd
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${{ needs.release.outputs.version }}" >> "$GITHUB_ENV"
          if [[ "${MSYSTEM}" == "MINGW64" ]]; then
            echo "BUILD_ARCH=x86_64" >> "$GITHUB_ENV"
            echo "INSTALL_NAME=pragtical-${{ needs.release.outputs.version }}-windows-x86_64" >> "$GITHUB_ENV"
          else
            echo "BUILD_ARCH=i686" >> "$GITHUB_ENV"
            echo "INSTALL_NAME=pragtical-${{ needs.release.outputs.version }}-windows-i686" >> "$GITHUB_ENV"
          fi
      - name: Build
        run: |
          bash --version
          bash scripts/build.sh --debug --forcefallback
      - name: Package
        run: bash scripts/package.sh --version ${INSTALL_REF} --addons --debug --binary
      - name: Build Installer
        run: bash scripts/innosetup/innosetup.sh --debug --version ${INSTALL_REF}
      - name: Upload Files
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ needs.release.outputs.version }}
          draft: false
          prerelease: true
          files: |
            ${{ env.INSTALL_NAME }}.zip
            Pragtical-${{ env.INSTALL_REF }}-${{ env.BUILD_ARCH }}-setup.exe

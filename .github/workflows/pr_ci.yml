name: Pull Requests CI

on:
  pull_request:
    branches:
      - '*'

  workflow_dispatch:

jobs:
  build_linux:
    name: Linux
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        config:
        - { name: "GCC", cc: gcc, cxx: g++ }
        - { name: "clang", cc: clang, cxx: clang++ }
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set Environment Variables
        if: ${{ matrix.config.cc == 'gcc' }}
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
          echo "INSTALL_NAME=pragtical-${GITHUB_REF##*/}-linux-$(uname -m)-portable" >> "$GITHUB_ENV"
      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Update Packages
        run: sudo apt-get update
      - name: Install Dependencies
        run: bash scripts/install-dependencies.sh --debug
      - name: Build
        run: |
          bash --version
          bash scripts/build.sh --debug --forcefallback --portable
      - name: Package
        if: ${{ matrix.config.cc == 'gcc' }}
        run: bash scripts/package.sh --version ${INSTALL_REF} --debug --binary
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.config.cc == 'gcc' }}
        with:
          name: Linux x86_64
          path: ${{ env.INSTALL_NAME }}.tar.gz

  build_macos:
    name: macOS
    runs-on: macos-13
    env:
      CC: clang
      CXX: clang++
    strategy:
      matrix:
        arch: ['x86_64', 'arm64']
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: System Information
        run: |
          system_profiler SPSoftwareDataType
          bash --version
          gcc -v
          xcodebuild -version
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
          echo "INSTALL_NAME=pragtical-${GITHUB_REF##*/}-macos-${{ matrix.arch }}" >> "$GITHUB_ENV"
          if [[ $(uname -m) != ${{ matrix.arch }} ]]; then echo "ARCH=--cross-arch ${{ matrix.arch }}" >> "$GITHUB_ENV"; fi
      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install Dependencies
        run: bash scripts/install-dependencies.sh --debug
      - name: Build
        run: |
          bash --version
          bash scripts/build.sh --bundle --debug --forcefallback $ARCH
      - name: Create DMG Image
        run: bash scripts/package.sh --version ${INSTALL_REF} $ARCH --debug --dmg
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS DMG ${{ matrix.arch }}
          path: ${{ env.INSTALL_NAME }}.dmg

  build_macos_universal:
    name: macOS (Universal)
    needs: build_macos
    runs-on: macos-13
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: System Information
        run: |
          system_profiler SPSoftwareDataType
          bash --version
          gcc -v
          xcodebuild -version
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_NAME=pragtical-${GITHUB_REF##*/}-macos-universal" >> "$GITHUB_ENV"
      - name: Download X86_64 DMG
        uses: actions/download-artifact@v4
        with:
          name: macOS DMG x86_64
          path: dmgs-original
      - name: Download ARM64 DMG
        uses: actions/download-artifact@v4
        with:
          name: macOS DMG arm64
          path: dmgs-original
      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install appdmg
        run: cd ~; npm i appdmg; cd -
      - name: Make universal bundle
        run: |
          bash scripts/make-universal-binaries.sh dmgs-original "${INSTALL_NAME}"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS DMG universal
          path: ${{ env.INSTALL_NAME }}.dmg

  build_windows_msys2:
    name: Windows
    runs-on: windows-2019
    strategy:
      matrix:
        config:
          - {msystem: MINGW32, arch: i686, target: x86}
          - {msystem: MINGW64, arch: x86_64, target: x64}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.config.msystem }}
          install: >-
            base-devel
            git
            zip
            unzip
            mingw-w64-${{ matrix.config.arch }}-gcc
            mingw-w64-${{ matrix.config.arch }}-meson
            mingw-w64-${{ matrix.config.arch }}-ninja
            mingw-w64-${{ matrix.config.arch }}-cmake
            mingw-w64-${{ matrix.config.arch }}-ca-certificates
            mingw-w64-${{ matrix.config.arch }}-ntldd
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
          if [[ "${MSYSTEM}" == "MINGW64" ]]; then
            echo "INSTALL_NAME=pragtical-${GITHUB_REF##*/}-windows-x86_64" >> "$GITHUB_ENV"
          else
            echo "INSTALL_NAME=pragtical-${GITHUB_REF##*/}-windows-i686" >> "$GITHUB_ENV"
          fi
      - name: Install Dependencies
        if: false
        run: bash scripts/install-dependencies.sh --debug
      - name: Build
        run: |
          bash --version
          bash scripts/build.sh --debug --forcefallback
      - name: Package
        run: bash scripts/package.sh --version ${INSTALL_REF} --debug --binary
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows (MSYS) ${{ matrix.config.target }}
          path: ${{ env.INSTALL_NAME }}.zip

  build_windows_msvc:
    name: Windows (MSVC)
    runs-on: windows-2019
    strategy:
      matrix:
        arch:
          - { target: x86, name: i686 }
          - { target: x64, name: x86_64 }
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Setup Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch.target }}
      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install meson and ninja
        run: pip install meson ninja
      - name: Set up environment variables
        run: |
          "INSTALL_NAME=pragtical-$($env:GITHUB_REF -replace ".*/")-windows-msvc-${{ matrix.arch.name }}" >> $env:GITHUB_ENV
          "INSTALL_REF=$($env:GITHUB_REF -replace ".*/")" >> $env:GITHUB_ENV
          "LUA_SUBPROJECT_PATH=subprojects/lua-5.4.6" >> $env:GITHUB_ENV
      - name: Configure
        run: |
          meson setup --wrap-mode=forcefallback -Dppm=false build
      - name: Build
        run: |
          meson install -C build --destdir="../pragtical"
      - name: Package
        run: |
          Remove-Item -Recurse -Force -Path "pragtical/lib","pragtical/include"
          Compress-Archive -Path pragtical -DestinationPath "$env:INSTALL_NAME.zip"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows (MSVC) ${{ matrix.arch.target }}
          path: ${{ env.INSTALL_NAME }}.zip
